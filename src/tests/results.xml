<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="2" time="6.319" timestamp="2022-07-01T12:56:00.556733" hostname="8L4IT02"><testcase classname="prueba001.test_005" name="test_005" time="2.758"><failure message="selenium.common.exceptions.WebDriverException: Message: unknown error: Microsoft Edge failed to start: crashed.&#10;  (unknown error: DevToolsActivePort file doesn't exist)&#10;  (The process started from msedge location C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe is no longer running, so msedgedriver is assuming that msedge has crashed.)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Microsoft::Applications::Events::EventProperties::unpack [0x00007FF782876292+24642]&#10;&#09;Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827C99E2+334098]&#10;&#09;Ordinal0 [0x00007FF782367915+620821]&#10;&#09;Ordinal0 [0x00007FF78238FC83+785539]&#10;&#09;Ordinal0 [0x00007FF78238A9EE+764398]&#10;&#09;Ordinal0 [0x00007FF7823C45FF+1000959]&#10;&#09;Ordinal0 [0x00007FF7823BECB3+978099]&#10;&#09;Ordinal0 [0x00007FF782395F00+810752]&#10;&#09;Ordinal0 [0x00007FF782397508+816392]&#10;&#09;Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF78262D478+135480]&#10;&#09;Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF782614B77+34871]&#10;&#09;Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF782617BFC+47292]&#10;&#09;Microsoft::Applications::Events::EventProperty::to_string [0x00007FF7824711B6+23222]&#10;&#09;Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D0EEB+364059]&#10;&#09;Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D5924+383060]&#10;&#09;Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D5A7D+383405]&#10;&#09;Microsoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF7827E038E+39918]&#10;&#09;BaseThreadInitThunk [0x00007FFE33107034+20]&#10;&#09;RtlUserThreadStart [0x00007FFE34402651+33]">self = &lt;src.tests.prueba001.test_005 testMethod=test_005&gt;

    def setUp(self):
        with allure.step(u'PASO 1: Ingresar al WMS de CEDIS'):
&gt;           Selenium.abrir_navegador(self)

prueba001.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\functions\Functions.py:38: in abrir_navegador
    self.driver = webdriver.Edge()
C:\Python310\lib\site-packages\selenium\webdriver\edge\webdriver.py:61: in __init__
    super().__init__(DesiredCapabilities.EDGE['browserName'], "ms",
C:\Python310\lib\site-packages\selenium\webdriver\chromium\webdriver.py:92: in __init__
    super().__init__(
C:\Python310\lib\site-packages\selenium\webdriver\remote\webdriver.py:277: in __init__
    self.start_session(capabilities, browser_profile)
C:\Python310\lib\site-packages\selenium\webdriver\remote\webdriver.py:370: in start_session
    response = self.execute(Command.NEW_SESSION, parameters)
C:\Python310\lib\site-packages\selenium\webdriver\remote\webdriver.py:435: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026258EEB820&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"unknown error: Microsoft Edge failed to start: ...27E038E+39918]\\n\\tBaseThreadInitThunk [0x00007FFE33107034+20]\\n\\tRtlUserThreadStart [0x00007FFE34402651+33]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = f"{file}:{line}"
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "{}.{}".format(frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: Microsoft Edge failed to start: crashed.
E         (unknown error: DevToolsActivePort file doesn't exist)
E         (The process started from msedge location C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe is no longer running, so msedgedriver is assuming that msedge has crashed.)
E       Stacktrace:
E       Backtrace:
E       	Microsoft::Applications::Events::EventProperties::unpack [0x00007FF782876292+24642]
E       	Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827C99E2+334098]
E       	Ordinal0 [0x00007FF782367915+620821]
E       	Ordinal0 [0x00007FF78238FC83+785539]
E       	Ordinal0 [0x00007FF78238A9EE+764398]
E       	Ordinal0 [0x00007FF7823C45FF+1000959]
E       	Ordinal0 [0x00007FF7823BECB3+978099]
E       	Ordinal0 [0x00007FF782395F00+810752]
E       	Ordinal0 [0x00007FF782397508+816392]
E       	Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF78262D478+135480]
E       	Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF782614B77+34871]
E       	Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF782617BFC+47292]
E       	Microsoft::Applications::Events::EventProperty::to_string [0x00007FF7824711B6+23222]
E       	Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D0EEB+364059]
E       	Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D5924+383060]
E       	Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D5A7D+383405]
E       	Microsoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF7827E038E+39918]
E       	BaseThreadInitThunk [0x00007FFE33107034+20]
E       	RtlUserThreadStart [0x00007FFE34402651+33]

C:\Python310\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: WebDriverException</failure></testcase><testcase classname="tst_wmscd2.test_003" name="test_003" time="2.666"><failure message="selenium.common.exceptions.WebDriverException: Message: unknown error: Microsoft Edge failed to start: crashed.&#10;  (unknown error: DevToolsActivePort file doesn't exist)&#10;  (The process started from msedge location C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe is no longer running, so msedgedriver is assuming that msedge has crashed.)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Microsoft::Applications::Events::EventProperties::unpack [0x00007FF782876292+24642]&#10;&#09;Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827C99E2+334098]&#10;&#09;Ordinal0 [0x00007FF782367915+620821]&#10;&#09;Ordinal0 [0x00007FF78238FC83+785539]&#10;&#09;Ordinal0 [0x00007FF78238A9EE+764398]&#10;&#09;Ordinal0 [0x00007FF7823C45FF+1000959]&#10;&#09;Ordinal0 [0x00007FF7823BECB3+978099]&#10;&#09;Ordinal0 [0x00007FF782395F00+810752]&#10;&#09;Ordinal0 [0x00007FF782397508+816392]&#10;&#09;Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF78262D478+135480]&#10;&#09;Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF782614B77+34871]&#10;&#09;Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF782617BFC+47292]&#10;&#09;Microsoft::Applications::Events::EventProperty::to_string [0x00007FF7824711B6+23222]&#10;&#09;Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D0EEB+364059]&#10;&#09;Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D5924+383060]&#10;&#09;Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D5A7D+383405]&#10;&#09;Microsoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF7827E038E+39918]&#10;&#09;BaseThreadInitThunk [0x00007FFE33107034+20]&#10;&#09;RtlUserThreadStart [0x00007FFE34402651+33]">self = &lt;src.tests.tst_wmscd2.test_003 testMethod=test_003&gt;

    def setUp(self):
        with allure.step(u'PASO 1: Ingresar al WMS de CEDIS'):
&gt;           Selenium.abrir_navegador(self)

tst_wmscd2.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\functions\Functions.py:38: in abrir_navegador
    self.driver = webdriver.Edge()
C:\Python310\lib\site-packages\selenium\webdriver\edge\webdriver.py:61: in __init__
    super().__init__(DesiredCapabilities.EDGE['browserName'], "ms",
C:\Python310\lib\site-packages\selenium\webdriver\chromium\webdriver.py:92: in __init__
    super().__init__(
C:\Python310\lib\site-packages\selenium\webdriver\remote\webdriver.py:277: in __init__
    self.start_session(capabilities, browser_profile)
C:\Python310\lib\site-packages\selenium\webdriver\remote\webdriver.py:370: in start_session
    response = self.execute(Command.NEW_SESSION, parameters)
C:\Python310\lib\site-packages\selenium\webdriver\remote\webdriver.py:435: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002625903F610&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"unknown error: Microsoft Edge failed to start: ...27E038E+39918]\\n\\tBaseThreadInitThunk [0x00007FFE33107034+20]\\n\\tRtlUserThreadStart [0x00007FFE34402651+33]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = f"{file}:{line}"
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "{}.{}".format(frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: Microsoft Edge failed to start: crashed.
E         (unknown error: DevToolsActivePort file doesn't exist)
E         (The process started from msedge location C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe is no longer running, so msedgedriver is assuming that msedge has crashed.)
E       Stacktrace:
E       Backtrace:
E       	Microsoft::Applications::Events::EventProperties::unpack [0x00007FF782876292+24642]
E       	Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827C99E2+334098]
E       	Ordinal0 [0x00007FF782367915+620821]
E       	Ordinal0 [0x00007FF78238FC83+785539]
E       	Ordinal0 [0x00007FF78238A9EE+764398]
E       	Ordinal0 [0x00007FF7823C45FF+1000959]
E       	Ordinal0 [0x00007FF7823BECB3+978099]
E       	Ordinal0 [0x00007FF782395F00+810752]
E       	Ordinal0 [0x00007FF782397508+816392]
E       	Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF78262D478+135480]
E       	Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF782614B77+34871]
E       	Microsoft::Applications::Events::EventProperty::EventProperty [0x00007FF782617BFC+47292]
E       	Microsoft::Applications::Events::EventProperty::to_string [0x00007FF7824711B6+23222]
E       	Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D0EEB+364059]
E       	Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D5924+383060]
E       	Microsoft::Applications::Events::GUID_t::GUID_t [0x00007FF7827D5A7D+383405]
E       	Microsoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF7827E038E+39918]
E       	BaseThreadInitThunk [0x00007FFE33107034+20]
E       	RtlUserThreadStart [0x00007FFE34402651+33]

C:\Python310\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: WebDriverException</failure></testcase></testsuite></testsuites>